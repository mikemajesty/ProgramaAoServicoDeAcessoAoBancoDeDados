//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace frmConectar.Servico {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Servico.IConexao")]
    public interface IConexao {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConexao/LimparParametros", ReplyAction="http://tempuri.org/IConexao/LimparParametrosResponse")]
        void LimparParametros();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConexao/LimparParametros", ReplyAction="http://tempuri.org/IConexao/LimparParametrosResponse")]
        System.Threading.Tasks.Task LimparParametrosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConexao/AdicionarParametros", ReplyAction="http://tempuri.org/IConexao/AdicionarParametrosResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Data.CommandType))]
        void AdicionarParametros(string pNome, object pValor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConexao/AdicionarParametros", ReplyAction="http://tempuri.org/IConexao/AdicionarParametrosResponse")]
        System.Threading.Tasks.Task AdicionarParametrosAsync(string pNome, object pValor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConexao/ExecutaComando", ReplyAction="http://tempuri.org/IConexao/ExecutaComandoResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Data.CommandType))]
        object ExecutaComando(System.Data.CommandType tipoComando, string comando);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConexao/ExecutaComando", ReplyAction="http://tempuri.org/IConexao/ExecutaComandoResponse")]
        System.Threading.Tasks.Task<object> ExecutaComandoAsync(System.Data.CommandType tipoComando, string comando);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConexao/ExecutaConsulta", ReplyAction="http://tempuri.org/IConexao/ExecutaConsultaResponse")]
        System.Data.DataSet ExecutaConsulta(System.Data.CommandType tipoComando, string comando);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConexao/ExecutaConsulta", ReplyAction="http://tempuri.org/IConexao/ExecutaConsultaResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ExecutaConsultaAsync(System.Data.CommandType tipoComando, string comando);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConexao/dddd", ReplyAction="http://tempuri.org/IConexao/ddddResponse")]
        string dddd();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConexao/dddd", ReplyAction="http://tempuri.org/IConexao/ddddResponse")]
        System.Threading.Tasks.Task<string> ddddAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConexaoChannel : frmConectar.Servico.IConexao, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConexaoClient : System.ServiceModel.ClientBase<frmConectar.Servico.IConexao>, frmConectar.Servico.IConexao {
        
        public ConexaoClient() {
        }
        
        public ConexaoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConexaoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConexaoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConexaoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void LimparParametros() {
            base.Channel.LimparParametros();
        }
        
        public System.Threading.Tasks.Task LimparParametrosAsync() {
            return base.Channel.LimparParametrosAsync();
        }
        
        public void AdicionarParametros(string pNome, object pValor) {
            base.Channel.AdicionarParametros(pNome, pValor);
        }
        
        public System.Threading.Tasks.Task AdicionarParametrosAsync(string pNome, object pValor) {
            return base.Channel.AdicionarParametrosAsync(pNome, pValor);
        }
        
        public object ExecutaComando(System.Data.CommandType tipoComando, string comando) {
            return base.Channel.ExecutaComando(tipoComando, comando);
        }
        
        public System.Threading.Tasks.Task<object> ExecutaComandoAsync(System.Data.CommandType tipoComando, string comando) {
            return base.Channel.ExecutaComandoAsync(tipoComando, comando);
        }
        
        public System.Data.DataSet ExecutaConsulta(System.Data.CommandType tipoComando, string comando) {
            return base.Channel.ExecutaConsulta(tipoComando, comando);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ExecutaConsultaAsync(System.Data.CommandType tipoComando, string comando) {
            return base.Channel.ExecutaConsultaAsync(tipoComando, comando);
        }
        
        public string dddd() {
            return base.Channel.dddd();
        }
        
        public System.Threading.Tasks.Task<string> ddddAsync() {
            return base.Channel.ddddAsync();
        }
    }
}
